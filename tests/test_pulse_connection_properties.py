# Generated by CodiumAI
from asyncio import AbstractEventLoop

import pytest
from aiohttp import ClientSession

from pyadtpulse.const import ADT_DEFAULT_HTTP_USER_AGENT, API_HOST_CA, DEFAULT_API_HOST
from pyadtpulse.pulse_connection_properties import PulseConnectionProperties


class TestPulseConnectionProperties:
    # Initialize PulseConnectionProperties with valid host
    @pytest.mark.asyncio
    async def test_initialize_with_valid_host(self):
        # Arrange
        host = "https://portal.adtpulse.com"
        user_agent = ADT_DEFAULT_HTTP_USER_AGENT["User-Agent"]
        detailed_debug_logging = False
        debug_locks = False

        # Act
        connection_properties = PulseConnectionProperties(
            host, user_agent, detailed_debug_logging, debug_locks
        )

        # Assert
        assert connection_properties.service_host == host
        assert connection_properties._user_agent == user_agent
        assert connection_properties._detailed_debug_logging == detailed_debug_logging
        assert connection_properties._debug_locks == debug_locks

    # Set service host to default API host
    @pytest.mark.asyncio
    async def test_set_service_host_to_default_api_host(self):
        # Arrange
        host = DEFAULT_API_HOST
        user_agent = ADT_DEFAULT_HTTP_USER_AGENT["User-Agent"]
        detailed_debug_logging = False
        debug_locks = False
        connection_properties = PulseConnectionProperties(
            host, user_agent, detailed_debug_logging, debug_locks
        )

        # Act
        connection_properties.service_host = DEFAULT_API_HOST

        # Assert
        assert connection_properties.service_host == DEFAULT_API_HOST

    # Set service host to API host CA
    @pytest.mark.asyncio
    async def test_set_service_host_to_api_host_ca(self):
        # Arrange
        host = DEFAULT_API_HOST
        user_agent = ADT_DEFAULT_HTTP_USER_AGENT["User-Agent"]
        detailed_debug_logging = False
        debug_locks = False
        connection_properties = PulseConnectionProperties(
            host, user_agent, detailed_debug_logging, debug_locks
        )

        # Act
        connection_properties.service_host = API_HOST_CA

        # Assert
        assert connection_properties.service_host == API_HOST_CA

    # Get the service host
    @pytest.mark.asyncio
    async def test_get_service_host(self):
        # Arrange
        host = "https://portal.adtpulse.com"
        user_agent = ADT_DEFAULT_HTTP_USER_AGENT["User-Agent"]
        detailed_debug_logging = False
        debug_locks = False
        connection_properties = PulseConnectionProperties(
            host, user_agent, detailed_debug_logging, debug_locks
        )

        # Act & Assert
        assert connection_properties.service_host == host

    # Set detailed debug logging to True
    @pytest.mark.asyncio
    async def test_set_detailed_debug_logging_to_true(self):
        # Arrange
        host = "https://portal.adtpulse.com"
        user_agent = ADT_DEFAULT_HTTP_USER_AGENT["User-Agent"]
        detailed_debug_logging = False
        debug_locks = False
        connection_properties = PulseConnectionProperties(
            host, user_agent, detailed_debug_logging, debug_locks
        )

        # Act
        connection_properties.detailed_debug_logging = True

        # Assert
        assert connection_properties.detailed_debug_logging is True

    # Set detailed debug logging to False
    @pytest.mark.asyncio
    async def test_set_detailed_debug_logging_to_false(self):
        # Arrange
        host = "https://portal.adtpulse.com"
        user_agent = ADT_DEFAULT_HTTP_USER_AGENT["User-Agent"]
        detailed_debug_logging = True
        debug_locks = False
        connection_properties = PulseConnectionProperties(
            host, user_agent, detailed_debug_logging, debug_locks
        )

        # Act
        connection_properties.detailed_debug_logging = False

        # Assert
        assert connection_properties.detailed_debug_logging is False

    # Initialize PulseConnectionProperties with invalid host raises ValueError
    @pytest.mark.asyncio
    async def test_initialize_with_invalid_host_raises_value_error(self):
        # Arrange
        host = ""
        user_agent = ADT_DEFAULT_HTTP_USER_AGENT["User-Agent"]
        detailed_debug_logging = False
        debug_locks = False

        # Act & Assert
        with pytest.raises(ValueError):
            PulseConnectionProperties(
                host, user_agent, detailed_debug_logging, debug_locks
            )

    # Set service host to valid host does not raise ValueError
    @pytest.mark.asyncio
    async def test_set_service_host_to_valid_host_does_not_raise_value_error(self):
        # Arrange
        host = "https://portal.adtpulse.com"
        user_agent = ADT_DEFAULT_HTTP_USER_AGENT["User-Agent"]
        detailed_debug_logging = False
        debug_locks = False
        connection_properties = PulseConnectionProperties(
            host, user_agent, detailed_debug_logging, debug_locks
        )

        # Act & Assert
        connection_properties.service_host = host

    # Set API version to invalid version raises ValueError
    @pytest.mark.asyncio
    async def test_set_api_version_to_invalid_version_raises_value_error(self):
        # Arrange
        host = "https://portal.adtpulse.com"
        user_agent = ADT_DEFAULT_HTTP_USER_AGENT["User-Agent"]
        detailed_debug_logging = False
        debug_locks = False
        connection_properties = PulseConnectionProperties(
            host, user_agent, detailed_debug_logging, debug_locks
        )

        # Act & Assert
        with pytest.raises(ValueError):
            connection_properties.api_version = "1.0"

    # Check sync without setting the event loop raises RuntimeError
    @pytest.mark.asyncio
    async def test_check_sync_without_setting_event_loop_raises_runtime_error(self):
        # Arrange
        host = "https://portal.adtpulse.com"
        user_agent = ADT_DEFAULT_HTTP_USER_AGENT["User-Agent"]
        detailed_debug_logging = False
        debug_locks = False
        connection_properties = PulseConnectionProperties(
            host, user_agent, detailed_debug_logging, debug_locks
        )

        # Act & Assert
        with pytest.raises(RuntimeError):
            connection_properties.check_sync("Sync login was not performed")

    # Get the detailed debug logging flag
    @pytest.mark.asyncio
    async def test_get_detailed_debug_logging_flag(self):
        # Arrange
        host = "https://portal.adtpulse.com"
        user_agent = ADT_DEFAULT_HTTP_USER_AGENT["User-Agent"]
        detailed_debug_logging = True
        debug_locks = False
        connection_properties = PulseConnectionProperties(
            host, user_agent, detailed_debug_logging, debug_locks
        )

        # Act
        result = connection_properties.detailed_debug_logging

        # Assert
        assert result == detailed_debug_logging

    # Set debug locks to True with a valid service host
    @pytest.mark.asyncio
    async def test_set_debug_locks_to_true_with_valid_service_host(self):
        # Arrange
        host = "https://portal.adtpulse.com"
        user_agent = ADT_DEFAULT_HTTP_USER_AGENT["User-Agent"]
        detailed_debug_logging = False
        debug_locks = True

        # Act
        connection_properties = PulseConnectionProperties(
            host, user_agent, detailed_debug_logging, debug_locks
        )

        # Assert
        assert connection_properties.service_host == host
        assert connection_properties._user_agent == user_agent
        assert connection_properties._detailed_debug_logging == detailed_debug_logging
        assert connection_properties._debug_locks == debug_locks

    # Get the debug locks flag
    @pytest.mark.asyncio
    async def test_get_debug_locks_flag(self):
        # Arrange
        host = "https://portal.adtpulse.com"
        user_agent = ADT_DEFAULT_HTTP_USER_AGENT["User-Agent"]
        detailed_debug_logging = False
        debug_locks = True

        # Act
        connection_properties = PulseConnectionProperties(
            host, user_agent, detailed_debug_logging, debug_locks
        )

        # Assert
        assert connection_properties.debug_locks == debug_locks

    # Set debug locks to False with a valid service host
    @pytest.mark.asyncio
    async def test_set_debug_locks_to_false_with_valid_service_host(self):
        # Arrange
        host = "https://portal.adtpulse.com"
        user_agent = ADT_DEFAULT_HTTP_USER_AGENT["User-Agent"]
        detailed_debug_logging = False
        debug_locks = False

        # Act
        connection_properties = PulseConnectionProperties(
            host, user_agent, detailed_debug_logging, debug_locks
        )

        # Assert
        assert connection_properties.debug_locks == debug_locks

    # Set the event loop
    @pytest.mark.asyncio
    async def test_set_event_loop(self):
        # Arrange
        host = "https://portal.adtpulse.com"
        user_agent = ADT_DEFAULT_HTTP_USER_AGENT["User-Agent"]
        detailed_debug_logging = False
        debug_locks = False
        loop = AbstractEventLoop()

        # Act
        connection_properties = PulseConnectionProperties(
            host, user_agent, detailed_debug_logging, debug_locks
        )
        connection_properties.loop = loop

        # Assert
        assert connection_properties.loop == loop

    # Get the event loop
    @pytest.mark.asyncio
    async def test_get_event_loop(self):
        # Arrange
        host = "https://portal.adtpulse.com"
        user_agent = ADT_DEFAULT_HTTP_USER_AGENT["User-Agent"]
        detailed_debug_logging = False
        debug_locks = False
        connection_properties = PulseConnectionProperties(
            host, user_agent, detailed_debug_logging, debug_locks
        )

        # Act
        event_loop = connection_properties.loop

        # Assert
        assert event_loop is None

    # Set the API version
    @pytest.mark.asyncio
    async def test_set_api_version(self):
        # Arrange
        host = "https://portal.adtpulse.com"
        user_agent = ADT_DEFAULT_HTTP_USER_AGENT["User-Agent"]
        detailed_debug_logging = False
        debug_locks = False
        version = "26.0.0-subpatch"

        connection_properties = PulseConnectionProperties(
            host, user_agent, detailed_debug_logging, debug_locks
        )

        # Act
        with pytest.raises(ValueError):
            connection_properties.api_version = version
        version = "26.0.0"
        with pytest.raises(ValueError):
            connection_properties.api_version = version
        version = "25.0.0-22"
        with pytest.raises(ValueError):
            connection_properties.api_version = version
        version = "26.0.0-22"
        connection_properties.api_version = version
        # Assert
        assert connection_properties.api_version == version

    # Get the API version
    @pytest.mark.asyncio
    async def test_get_api_version(self):
        # Arrange
        host = "https://portal.adtpulse.com"
        user_agent = ADT_DEFAULT_HTTP_USER_AGENT["User-Agent"]
        detailed_debug_logging = False
        debug_locks = False
        response_path = "example.com/api/v1"

        connection_properties = PulseConnectionProperties(
            host, user_agent, detailed_debug_logging, debug_locks
        )

        # Act
        api_version = connection_properties.get_api_version(response_path)

        # Assert
        assert api_version is None

    # Get the session with a valid host
    @pytest.mark.asyncio
    async def test_get_session_with_valid_host(self):
        # Arrange
        host = "https://portal.adtpulse.com"
        user_agent = ADT_DEFAULT_HTTP_USER_AGENT["User-Agent"]
        detailed_debug_logging = False
        debug_locks = False
        connection_properties = PulseConnectionProperties(
            host, user_agent, detailed_debug_logging, debug_locks
        )

        # Act
        session = connection_properties.session

        # Assert
        assert isinstance(session, ClientSession)
        assert connection_properties._session == session

    # Check async after setting the event loop raises RuntimeError
    @pytest.mark.asyncio
    async def test_check_async_after_setting_event_loop_raises_runtime_error(self):
        # Arrange
        host = "https://portal.adtpulse.com"
        user_agent = ADT_DEFAULT_HTTP_USER_AGENT["User-Agent"]
        detailed_debug_logging = False
        debug_locks = False
        connection_properties = PulseConnectionProperties(
            host, user_agent, detailed_debug_logging, debug_locks
        )

        # Act
        connection_properties.loop = AbstractEventLoop()

        # Assert
        with pytest.raises(RuntimeError):
            connection_properties.check_async("Async login not performed")
