# Initially Generated by CodiumAI
from asyncio import AbstractEventLoop
from unittest import mock
import pytest
from typeguard import TypeCheckError
from pyadtpulse.pulse_connection_info import PulseConnectionInfo
from pyadtpulse.const import DEFAULT_API_HOST, API_HOST_CA


class TestPulseConnectionInfo:
    # Initialize PulseConnectionInfo with valid host and session
    def test_initialize_with_valid_host_and_session(self):
        # Arrange
        from unittest import mock

        host = DEFAULT_API_HOST
        session = mock.Mock()

        # Act
        pci = PulseConnectionInfo(host, session)

        # Assert
        assert pci.service_host == host
        assert pci._session == session
        assert pci._allocated_session == False
        assert pci.detailed_debug_logging == False
        assert pci.debug_locks == False
        assert pci.loop == None

    # set and get service_host property
    def test_set_and_get_service_host_property(self):
        # Arrange
        host = DEFAULT_API_HOST
        pci = PulseConnectionInfo(host)

        # Act
        pci.service_host = API_HOST_CA

        # Assert
        assert pci.service_host == API_HOST_CA

    # set and get detailed_debug_logging property
    def test_set_and_get_detailed_debug_logging_property(self):
        # Arrange
        host = DEFAULT_API_HOST
        pci = PulseConnectionInfo(host)

        # Act
        pci.detailed_debug_logging = True

        # Assert
        assert pci.detailed_debug_logging == True

    # set and get debug_locks property
    def test_set_and_get_debug_locks_property(self):
        # Arrange
        host = DEFAULT_API_HOST
        pci = PulseConnectionInfo(host)

        # Act
        pci.debug_locks = True

        # Assert
        assert pci.debug_locks == True

    # set and get loop property
    def test_set_and_get_loop_property(self):
        # Arrange
        host = DEFAULT_API_HOST
        pci = PulseConnectionInfo(host)
        loop = mock.Mock()

        # Act
        pci.loop = loop

        # Assert
        assert pci.loop == loop

    # Check if sync login was performed successfully
    def test_check_sync_login_successful(self):
        # Arrange
        host = DEFAULT_API_HOST
        pci = PulseConnectionInfo(host)

        # Act
        loop = None
        try:
            loop = pci.check_sync("Sync login not performed")
            assert False, "Expected RuntimeError to be raised"
        except RuntimeError as e:
            assert str(e) == "Sync login not performed"

        # Assert
        assert loop is None

    # initialize PulseConnectionInfo with invalid host
    def test_initialize_with_invalid_host(self):
        # Arrange
        host = ""

        # Act/Assert
        with pytest.raises(ValueError):
            pci = PulseConnectionInfo(host)

    # Initialize PulseConnectionInfo with closed session
    def test_initialize_with_closed_session(self):
        # Arrange

        host = "valid_host"
        session = mock.Mock()
        session.closed = True

        # Act/Assert
        with pytest.raises(ValueError):
            pci = PulseConnectionInfo(host, session)

    # Initialize PulseConnectionInfo with None host
    def test_initialize_with_none_host(self):
        # Arrange
        host = None

        # Act/Assert
        with pytest.raises(TypeCheckError):
            pci = PulseConnectionInfo(host)

    # initialize PulseConnectionInfo with invalid service_host
    def test_initialize_with_invalid_service_host(self):
        # Arrange
        host = "invalid_host"

        # Act/Assert
        with pytest.raises(ValueError):
            pci = PulseConnectionInfo(host)

    # Initialize PulseConnectionInfo with invalid debug_locks
    def test_initialize_with_invalid_debug_locks(self):
        # Arrange
        host = DEFAULT_API_HOST

        # Act/Assert
        with pytest.raises(TypeCheckError):
            pci = PulseConnectionInfo(host, debug_locks="invalid_value")

    # Initialize PulseConnectionInfo with invalid detailed_debug_logging
    def test_initialize_with_invalid_detailed_debug_logging(self):
        # Arrange
        host = DEFAULT_API_HOST

        # Act/Assert
        with pytest.raises(TypeCheckError):
            pci = PulseConnectionInfo(host, detailed_debug_logging="invalid_value")

    # Check if service host is valid
    def test_check_service_host_valid(self):
        # Arrange
        host = DEFAULT_API_HOST

        # Act
        PulseConnectionInfo.check_service_host(host)

        # Assert
        # No exception should be raised

    # Initialize PulseConnectionInfo with a valid host
    def test_initialize_with_valid_host(self):
        # Arrange

        host = DEFAULT_API_HOST
        session = mock.Mock()

        # Act
        pulse_connection_info = PulseConnectionInfo(host, session)

        # Assert
        assert pulse_connection_info.service_host == host

    # set service_host to an invalid string
    def test_set_service_host_to_invalid_string(self):
        # Arrange
        host = DEFAULT_API_HOST
        pci = PulseConnectionInfo(host)

        # Act and Assert
        with pytest.raises(ValueError):
            pci.service_host = ""

    # set service_host to valid host
    def test_set_valid_service_host(self):
        # Arrange
        pci = PulseConnectionInfo(DEFAULT_API_HOST)

        # Act
        pci.service_host = API_HOST_CA

        # Assert
        assert pci.service_host == API_HOST_CA

    # set detailed_debug_logging to invalid value
    def test_set_invalid_detailed_debug_logging(self):
        # Arrange
        pci = PulseConnectionInfo(DEFAULT_API_HOST)

        # Act and Assert
        with pytest.raises(TypeCheckError):
            pci.detailed_debug_logging = "invalid_value"

    # set debug_locks to invalid value
    def test_set_invalid_debug_locks(self):
        # Arrange
        pci = PulseConnectionInfo(DEFAULT_API_HOST)

        # Act and Assert
        with pytest.raises(TypeCheckError):
            pci.debug_locks = "invalid_value"

    # Set the loop property to a valid value
    def test_set_loop_to_valid_value(self):
        # Arrange
        pci = PulseConnectionInfo(DEFAULT_API_HOST)
        loop = AbstractEventLoop()

        # Act
        pci.loop = loop

        # Assert
        assert pci.loop == loop

    # Test that check_sync raises a RuntimeError when sync login has not been performed.
    def test_check_sync_before_sync_login(self):
        """
        Test that check_sync raises a RuntimeError when sync login has not been performed.
        """
        # Arrange
        pci = PulseConnectionInfo(DEFAULT_API_HOST)
        message = "Sync login has not been performed"

        # Act and Assert
        with pytest.raises(RuntimeError, match=message):
            pci.check_sync(message)
